// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proxy.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace l2PushGrpc {
  public static partial class Proxy
  {
    static readonly string __ServiceName = "sa.rpc.cli.proxy.Proxy";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::l2PushGrpc.Void> __Marshaller_sa_rpc_entity_Void = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::l2PushGrpc.Void.Parser));
    static readonly grpc::Marshaller<global::l2PushGrpc.SubscriptionRsp> __Marshaller_sa_rpc_cli_proxy_SubscriptionRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::l2PushGrpc.SubscriptionRsp.Parser));
    static readonly grpc::Marshaller<global::l2PushGrpc.String> __Marshaller_sa_rpc_entity_String = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::l2PushGrpc.String.Parser));
    static readonly grpc::Marshaller<global::l2PushGrpc.Rsp> __Marshaller_sa_rpc_cli_proxy_Rsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::l2PushGrpc.Rsp.Parser));
    static readonly grpc::Marshaller<global::l2PushGrpc.TickRecord> __Marshaller_sa_rpc_entity_TickRecord = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::l2PushGrpc.TickRecord.Parser));
    static readonly grpc::Marshaller<global::l2PushGrpc.OrderRecord> __Marshaller_sa_rpc_entity_OrderRecord = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::l2PushGrpc.OrderRecord.Parser));
    static readonly grpc::Marshaller<global::l2PushGrpc.OrderQueueRecord> __Marshaller_sa_rpc_entity_OrderQueueRecord = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::l2PushGrpc.OrderQueueRecord.Parser));
    static readonly grpc::Marshaller<global::l2PushGrpc.StockQuoteRecord> __Marshaller_sa_rpc_entity_StockQuoteRecord = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::l2PushGrpc.StockQuoteRecord.Parser));

    static readonly grpc::Method<global::l2PushGrpc.Void, global::l2PushGrpc.SubscriptionRsp> __Method_GetSubscription = new grpc::Method<global::l2PushGrpc.Void, global::l2PushGrpc.SubscriptionRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSubscription",
        __Marshaller_sa_rpc_entity_Void,
        __Marshaller_sa_rpc_cli_proxy_SubscriptionRsp);

    static readonly grpc::Method<global::l2PushGrpc.String, global::l2PushGrpc.Rsp> __Method_AddSubscription = new grpc::Method<global::l2PushGrpc.String, global::l2PushGrpc.Rsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddSubscription",
        __Marshaller_sa_rpc_entity_String,
        __Marshaller_sa_rpc_cli_proxy_Rsp);

    static readonly grpc::Method<global::l2PushGrpc.String, global::l2PushGrpc.Rsp> __Method_DelSubscription = new grpc::Method<global::l2PushGrpc.String, global::l2PushGrpc.Rsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DelSubscription",
        __Marshaller_sa_rpc_entity_String,
        __Marshaller_sa_rpc_cli_proxy_Rsp);

    static readonly grpc::Method<global::l2PushGrpc.Void, global::l2PushGrpc.TickRecord> __Method_NewTickRecordStream = new grpc::Method<global::l2PushGrpc.Void, global::l2PushGrpc.TickRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "NewTickRecordStream",
        __Marshaller_sa_rpc_entity_Void,
        __Marshaller_sa_rpc_entity_TickRecord);

    static readonly grpc::Method<global::l2PushGrpc.Void, global::l2PushGrpc.OrderRecord> __Method_NewOrderRecordStream = new grpc::Method<global::l2PushGrpc.Void, global::l2PushGrpc.OrderRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "NewOrderRecordStream",
        __Marshaller_sa_rpc_entity_Void,
        __Marshaller_sa_rpc_entity_OrderRecord);

    static readonly grpc::Method<global::l2PushGrpc.Void, global::l2PushGrpc.OrderQueueRecord> __Method_NewOrderQueueRecordStream = new grpc::Method<global::l2PushGrpc.Void, global::l2PushGrpc.OrderQueueRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "NewOrderQueueRecordStream",
        __Marshaller_sa_rpc_entity_Void,
        __Marshaller_sa_rpc_entity_OrderQueueRecord);

    static readonly grpc::Method<global::l2PushGrpc.Void, global::l2PushGrpc.StockQuoteRecord> __Method_NewStockQuoteRecordStream = new grpc::Method<global::l2PushGrpc.Void, global::l2PushGrpc.StockQuoteRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "NewStockQuoteRecordStream",
        __Marshaller_sa_rpc_entity_Void,
        __Marshaller_sa_rpc_entity_StockQuoteRecord);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::l2PushGrpc.ProxyReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for Proxy</summary>
    public partial class ProxyClient : grpc::ClientBase<ProxyClient>
    {
      /// <summary>Creates a new client for Proxy</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ProxyClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Proxy that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ProxyClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ProxyClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ProxyClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///查询订阅
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::l2PushGrpc.SubscriptionRsp GetSubscription(global::l2PushGrpc.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSubscription(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询订阅
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::l2PushGrpc.SubscriptionRsp GetSubscription(global::l2PushGrpc.Void request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSubscription, null, options, request);
      }
      /// <summary>
      ///查询订阅
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::l2PushGrpc.SubscriptionRsp> GetSubscriptionAsync(global::l2PushGrpc.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSubscriptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询订阅
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::l2PushGrpc.SubscriptionRsp> GetSubscriptionAsync(global::l2PushGrpc.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSubscription, null, options, request);
      }
      /// <summary>
      ///新增订阅
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::l2PushGrpc.Rsp AddSubscription(global::l2PushGrpc.String request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSubscription(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///新增订阅
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::l2PushGrpc.Rsp AddSubscription(global::l2PushGrpc.String request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddSubscription, null, options, request);
      }
      /// <summary>
      ///新增订阅
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::l2PushGrpc.Rsp> AddSubscriptionAsync(global::l2PushGrpc.String request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSubscriptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///新增订阅
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::l2PushGrpc.Rsp> AddSubscriptionAsync(global::l2PushGrpc.String request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddSubscription, null, options, request);
      }
      /// <summary>
      ///取消订阅
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::l2PushGrpc.Rsp DelSubscription(global::l2PushGrpc.String request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DelSubscription(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///取消订阅
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::l2PushGrpc.Rsp DelSubscription(global::l2PushGrpc.String request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DelSubscription, null, options, request);
      }
      /// <summary>
      ///取消订阅
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::l2PushGrpc.Rsp> DelSubscriptionAsync(global::l2PushGrpc.String request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DelSubscriptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///取消订阅
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::l2PushGrpc.Rsp> DelSubscriptionAsync(global::l2PushGrpc.String request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DelSubscription, null, options, request);
      }
      /// <summary>
      ///推送逐笔成交行情数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::l2PushGrpc.TickRecord> NewTickRecordStream(global::l2PushGrpc.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NewTickRecordStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///推送逐笔成交行情数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::l2PushGrpc.TickRecord> NewTickRecordStream(global::l2PushGrpc.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_NewTickRecordStream, null, options, request);
      }
      /// <summary>
      ///推送逐笔委托行情数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::l2PushGrpc.OrderRecord> NewOrderRecordStream(global::l2PushGrpc.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NewOrderRecordStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///推送逐笔委托行情数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::l2PushGrpc.OrderRecord> NewOrderRecordStream(global::l2PushGrpc.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_NewOrderRecordStream, null, options, request);
      }
      /// <summary>
      ///推送委托队列行情数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::l2PushGrpc.OrderQueueRecord> NewOrderQueueRecordStream(global::l2PushGrpc.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NewOrderQueueRecordStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///推送委托队列行情数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::l2PushGrpc.OrderQueueRecord> NewOrderQueueRecordStream(global::l2PushGrpc.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_NewOrderQueueRecordStream, null, options, request);
      }
      /// <summary>
      ///推送股票十档行情行情数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::l2PushGrpc.StockQuoteRecord> NewStockQuoteRecordStream(global::l2PushGrpc.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NewStockQuoteRecordStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///推送股票十档行情行情数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::l2PushGrpc.StockQuoteRecord> NewStockQuoteRecordStream(global::l2PushGrpc.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_NewStockQuoteRecordStream, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ProxyClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ProxyClient(configuration);
      }
    }

  }
}
#endregion
