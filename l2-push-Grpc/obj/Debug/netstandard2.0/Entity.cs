// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: entity.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace l2PushGrpc {

  /// <summary>Holder for reflection information generated from entity.proto</summary>
  public static partial class EntityReflection {

    #region Descriptor
    /// <summary>File descriptor for entity.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EntityReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxlbnRpdHkucHJvdG8SDXNhLnJwYy5lbnRpdHkiBgoEVm9pZCIVCgRCb29s",
            "Eg0KBXZhbHVlGAEgASgIIhcKBlN0cmluZxINCgV2YWx1ZRgBIAEoCSIcCgpT",
            "dHJpbmdMaXN0Eg4KBnZhbHVlcxgBIAMoCSIWCgVCeXRlcxINCgV2YWx1ZRgB",
            "IAEoDCIWCgVJbnQ2NBINCgV2YWx1ZRgBIAEoAyIbCglJbnQ2NExpc3QSDgoG",
            "dmFsdWVzGAEgAygDIhYKBUludDMyEg0KBXZhbHVlGAEgASgDIhsKCUludDMy",
            "TGlzdBIOCgZ2YWx1ZXMYASADKAUi2QEKClRpY2tSZWNvcmQSFgoOc3RvY2tf",
            "ZXhjaGFuZ2UYASABKA0SEgoKc3RvY2tfY29kZRgCIAEoCRISCgpjcmVhdGVk",
            "X2F0GAMgASgDEgwKBGNvZGUYBCABKAkSDQoFcHJpY2UYBSABKA0SDgoGdm9s",
            "dW1lGAYgASgEEg4KBmFtb3VudBgHIAEoBBIOCgZ0eF9kaXIYCCABKA0SDwoH",
            "dHhfa2luZBgJIAEoDRIVCg1idXlfb3JkZXJfc2VxGAogASgJEhYKDnNlbGxf",
            "b3JkZXJfc2VxGAsgASgJIqsBCgtPcmRlclJlY29yZBIWCg5zdG9ja19leGNo",
            "YW5nZRgBIAEoDRISCgpzdG9ja19jb2RlGAIgASgJEhIKCmNyZWF0ZWRfYXQY",
            "AyABKAMSDAoEY29kZRgEIAEoCRINCgVwcmljZRgFIAEoDRIOCgZ2b2x1bWUY",
            "BiABKAQSDgoGYW1vdW50GAcgASgEEg4KBnR4X2RpchgIIAEoDRIPCgd0eF9r",
            "aW5kGAkgASgNIt4BChBPcmRlclF1ZXVlUmVjb3JkEhYKDnN0b2NrX2V4Y2hh",
            "bmdlGAEgASgNEhIKCnN0b2NrX2NvZGUYAiABKAkSEgoKY3JlYXRlZF9hdBgD",
            "IAEoAxISCgpiaWQxX3ByaWNlGAQgASgNEhUKDWJpZDFfcXVhbnRpdHkYBSAB",
            "KA0SEgoKYXNrMV9wcmljZRgGIAEoDRIVCg1hc2sxX3F1YW50aXR5GAcgASgN",
            "EhkKEWJpZF92b2x1bWVfZGV0YWlsGAggAygNEhkKEWFza192b2x1bWVfZGV0",
            "YWlsGAkgAygNIu8DChBTdG9ja1F1b3RlUmVjb3JkEhYKDnN0b2NrX2V4Y2hh",
            "bmdlGAEgASgNEhIKCnN0b2NrX2NvZGUYAiABKAkSEgoKY3JlYXRlZF9hdBgD",
            "IAEoAxIOCgZzdGF0dXMYBCABKA0SGAoQcHJldl9jbG9zZV9wcmljZRgFIAEo",
            "DRISCgpvcGVuX3ByaWNlGAYgASgNEhQKDGxhdGVzdF9wcmljZRgHIAEoDRIS",
            "CgpoaWdoX3ByaWNlGAggASgNEhEKCWxvd19wcmljZRgJIAEoDRIWCg5saW1p",
            "dF91cF9wcmljZRgKIAEoDRIYChBsaW1pdF9kb3duX3ByaWNlGAsgASgNEhYK",
            "Dm9yZGVyX3F1YW50aXR5GAwgASgNEg4KBnZvbHVtZRgNIAEoBBIOCgZhbW91",
            "bnQYDiABKAQSEgoKYmlkX3ZvbHVtZRgPIAEoBBIRCgliaWRfcHJpY2UYECAB",
            "KA0SEgoKYXNrX3ZvbHVtZRgRIAEoBBIRCglhc2tfcHJpY2UYEiABKA0SGAoQ",
            "YmlkX3ByaWNlX2RldGFpbBgTIAMoDRIZChFiaWRfdm9sdW1lX2RldGFpbBgU",
            "IAMoDRIYChBhc2tfcHJpY2VfZGV0YWlsGBUgAygNEhkKEWFza192b2x1bWVf",
            "ZGV0YWlsGBYgAygNIrUBCgxTdWJzY3JpcHRpb24SCwoDdWlkGGQgASgDEg0K",
            "BXRvcGljGAEgASgJEhUKDXRvcGljX3BhdHRlcm4YAiABKAkSEgoKaXNfc3Vi",
            "X2FsbBgDIAEoCBISCgpleHBpcmVkX2F0GAQgASgDEhsKE21heF9zdWJzY3Jp",
            "YmVfY291bnQYBSABKA0SHAoUdXNlZF9zdWJzY3JpYmVfY291bnQYBiABKA0S",
            "DwoHdmVyc2lvbhgHIAEoA0IkWhVsMi1wdXNoLWdvL3JwYy9lbnRpdHmqAgps",
            "MlB1c2hHcnBjYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::l2PushGrpc.Void), global::l2PushGrpc.Void.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::l2PushGrpc.Bool), global::l2PushGrpc.Bool.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::l2PushGrpc.String), global::l2PushGrpc.String.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::l2PushGrpc.StringList), global::l2PushGrpc.StringList.Parser, new[]{ "Values" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::l2PushGrpc.Bytes), global::l2PushGrpc.Bytes.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::l2PushGrpc.Int64), global::l2PushGrpc.Int64.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::l2PushGrpc.Int64List), global::l2PushGrpc.Int64List.Parser, new[]{ "Values" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::l2PushGrpc.Int32), global::l2PushGrpc.Int32.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::l2PushGrpc.Int32List), global::l2PushGrpc.Int32List.Parser, new[]{ "Values" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::l2PushGrpc.TickRecord), global::l2PushGrpc.TickRecord.Parser, new[]{ "StockExchange", "StockCode", "CreatedAt", "Code", "Price", "Volume", "Amount", "TxDir", "TxKind", "BuyOrderSeq", "SellOrderSeq" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::l2PushGrpc.OrderRecord), global::l2PushGrpc.OrderRecord.Parser, new[]{ "StockExchange", "StockCode", "CreatedAt", "Code", "Price", "Volume", "Amount", "TxDir", "TxKind" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::l2PushGrpc.OrderQueueRecord), global::l2PushGrpc.OrderQueueRecord.Parser, new[]{ "StockExchange", "StockCode", "CreatedAt", "Bid1Price", "Bid1Quantity", "Ask1Price", "Ask1Quantity", "BidVolumeDetail", "AskVolumeDetail" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::l2PushGrpc.StockQuoteRecord), global::l2PushGrpc.StockQuoteRecord.Parser, new[]{ "StockExchange", "StockCode", "CreatedAt", "Status", "PrevClosePrice", "OpenPrice", "LatestPrice", "HighPrice", "LowPrice", "LimitUpPrice", "LimitDownPrice", "OrderQuantity", "Volume", "Amount", "BidVolume", "BidPrice", "AskVolume", "AskPrice", "BidPriceDetail", "BidVolumeDetail", "AskPriceDetail", "AskVolumeDetail" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::l2PushGrpc.Subscription), global::l2PushGrpc.Subscription.Parser, new[]{ "Uid", "Topic", "TopicPattern", "IsSubAll", "ExpiredAt", "MaxSubscribeCount", "UsedSubscribeCount", "Version" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Void : pb::IMessage<Void>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Void> _parser = new pb::MessageParser<Void>(() => new Void());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Void> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::l2PushGrpc.EntityReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Void() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Void(Void other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Void Clone() {
      return new Void(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Void);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Void other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Void other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class Bool : pb::IMessage<Bool>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Bool> _parser = new pb::MessageParser<Bool>(() => new Bool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Bool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::l2PushGrpc.EntityReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bool(Bool other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bool Clone() {
      return new Bool(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private bool value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Bool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Bool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != false) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Value != false) {
        output.WriteRawTag(8);
        output.WriteBool(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Value != false) {
        output.WriteRawTag(8);
        output.WriteBool(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Bool other) {
      if (other == null) {
        return;
      }
      if (other.Value != false) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Value = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class String : pb::IMessage<String>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<String> _parser = new pb::MessageParser<String>(() => new String());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<String> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::l2PushGrpc.EntityReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public String() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public String(String other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public String Clone() {
      return new String(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as String);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(String other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(String other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StringList : pb::IMessage<StringList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StringList> _parser = new pb::MessageParser<StringList>(() => new StringList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::l2PushGrpc.EntityReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringList(StringList other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringList Clone() {
      return new StringList(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_values_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> values_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      values_.WriteTo(ref output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringList other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            values_.AddEntriesFrom(ref input, _repeated_values_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Bytes : pb::IMessage<Bytes>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Bytes> _parser = new pb::MessageParser<Bytes>(() => new Bytes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Bytes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::l2PushGrpc.EntityReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bytes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bytes(Bytes other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bytes Clone() {
      return new Bytes(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private pb::ByteString value_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Bytes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Bytes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Bytes other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Int64 : pb::IMessage<Int64>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Int64> _parser = new pb::MessageParser<Int64>(() => new Int64());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Int64> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::l2PushGrpc.EntityReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int64() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int64(Int64 other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int64 Clone() {
      return new Int64(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private long value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Int64);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Int64 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0L) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Value != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Value != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Int64 other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Value = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Int64List : pb::IMessage<Int64List>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Int64List> _parser = new pb::MessageParser<Int64List>(() => new Int64List());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Int64List> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::l2PushGrpc.EntityReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int64List() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int64List(Int64List other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int64List Clone() {
      return new Int64List(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_values_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> values_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Int64List);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Int64List other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      values_.WriteTo(ref output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Int64List other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            values_.AddEntriesFrom(ref input, _repeated_values_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Int32 : pb::IMessage<Int32>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Int32> _parser = new pb::MessageParser<Int32>(() => new Int32());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Int32> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::l2PushGrpc.EntityReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int32() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int32(Int32 other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int32 Clone() {
      return new Int32(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private long value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Int32);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Int32 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0L) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Value != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Value != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Int32 other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Value = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Int32List : pb::IMessage<Int32List>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Int32List> _parser = new pb::MessageParser<Int32List>(() => new Int32List());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Int32List> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::l2PushGrpc.EntityReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int32List() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int32List(Int32List other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int32List Clone() {
      return new Int32List(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_values_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> values_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Int32List);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Int32List other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      values_.WriteTo(ref output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Int32List other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            values_.AddEntriesFrom(ref input, _repeated_values_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///逐笔成交
  /// </summary>
  public sealed partial class TickRecord : pb::IMessage<TickRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TickRecord> _parser = new pb::MessageParser<TickRecord>(() => new TickRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TickRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::l2PushGrpc.EntityReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TickRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TickRecord(TickRecord other) : this() {
      stockExchange_ = other.stockExchange_;
      stockCode_ = other.stockCode_;
      createdAt_ = other.createdAt_;
      code_ = other.code_;
      price_ = other.price_;
      volume_ = other.volume_;
      amount_ = other.amount_;
      txDir_ = other.txDir_;
      txKind_ = other.txKind_;
      buyOrderSeq_ = other.buyOrderSeq_;
      sellOrderSeq_ = other.sellOrderSeq_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TickRecord Clone() {
      return new TickRecord(this);
    }

    /// <summary>Field number for the "stock_exchange" field.</summary>
    public const int StockExchangeFieldNumber = 1;
    private uint stockExchange_;
    /// <summary>
    ///证券市场，1-SH，2-SZ
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StockExchange {
      get { return stockExchange_; }
      set {
        stockExchange_ = value;
      }
    }

    /// <summary>Field number for the "stock_code" field.</summary>
    public const int StockCodeFieldNumber = 2;
    private string stockCode_ = "";
    /// <summary>
    ///证券代码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StockCode {
      get { return stockCode_; }
      set {
        stockCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 3;
    private long createdAt_;
    /// <summary>
    ///成交日期时间戳(毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 4;
    private string code_ = "";
    /// <summary>
    ///成交编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 5;
    private uint price_;
    /// <summary>
    ///成交单价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 6;
    private ulong volume_;
    /// <summary>
    ///成交数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 7;
    private ulong amount_;
    /// <summary>
    ///成交金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "tx_dir" field.</summary>
    public const int TxDirFieldNumber = 8;
    private uint txDir_;
    /// <summary>
    ///交易方向：0-未知，1-买方成交，2-卖方成交
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TxDir {
      get { return txDir_; }
      set {
        txDir_ = value;
      }
    }

    /// <summary>Field number for the "tx_kind" field.</summary>
    public const int TxKindFieldNumber = 9;
    private uint txKind_;
    /// <summary>
    ///交易类型：0-成交，1-撤单
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TxKind {
      get { return txKind_; }
      set {
        txKind_ = value;
      }
    }

    /// <summary>Field number for the "buy_order_seq" field.</summary>
    public const int BuyOrderSeqFieldNumber = 10;
    private string buyOrderSeq_ = "";
    /// <summary>
    ///买方委托序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuyOrderSeq {
      get { return buyOrderSeq_; }
      set {
        buyOrderSeq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sell_order_seq" field.</summary>
    public const int SellOrderSeqFieldNumber = 11;
    private string sellOrderSeq_ = "";
    /// <summary>
    ///卖方委托序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellOrderSeq {
      get { return sellOrderSeq_; }
      set {
        sellOrderSeq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TickRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TickRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StockExchange != other.StockExchange) return false;
      if (StockCode != other.StockCode) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (Code != other.Code) return false;
      if (Price != other.Price) return false;
      if (Volume != other.Volume) return false;
      if (Amount != other.Amount) return false;
      if (TxDir != other.TxDir) return false;
      if (TxKind != other.TxKind) return false;
      if (BuyOrderSeq != other.BuyOrderSeq) return false;
      if (SellOrderSeq != other.SellOrderSeq) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StockExchange != 0) hash ^= StockExchange.GetHashCode();
      if (StockCode.Length != 0) hash ^= StockCode.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (Volume != 0UL) hash ^= Volume.GetHashCode();
      if (Amount != 0UL) hash ^= Amount.GetHashCode();
      if (TxDir != 0) hash ^= TxDir.GetHashCode();
      if (TxKind != 0) hash ^= TxKind.GetHashCode();
      if (BuyOrderSeq.Length != 0) hash ^= BuyOrderSeq.GetHashCode();
      if (SellOrderSeq.Length != 0) hash ^= SellOrderSeq.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StockExchange != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StockExchange);
      }
      if (StockCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StockCode);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CreatedAt);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Code);
      }
      if (Price != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Price);
      }
      if (Volume != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Volume);
      }
      if (Amount != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Amount);
      }
      if (TxDir != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(TxDir);
      }
      if (TxKind != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(TxKind);
      }
      if (BuyOrderSeq.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(BuyOrderSeq);
      }
      if (SellOrderSeq.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SellOrderSeq);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StockExchange != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StockExchange);
      }
      if (StockCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StockCode);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CreatedAt);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Code);
      }
      if (Price != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Price);
      }
      if (Volume != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Volume);
      }
      if (Amount != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Amount);
      }
      if (TxDir != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(TxDir);
      }
      if (TxKind != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(TxKind);
      }
      if (BuyOrderSeq.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(BuyOrderSeq);
      }
      if (SellOrderSeq.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SellOrderSeq);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StockExchange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StockExchange);
      }
      if (StockCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StockCode);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price);
      }
      if (Volume != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Volume);
      }
      if (Amount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Amount);
      }
      if (TxDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TxDir);
      }
      if (TxKind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TxKind);
      }
      if (BuyOrderSeq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuyOrderSeq);
      }
      if (SellOrderSeq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellOrderSeq);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TickRecord other) {
      if (other == null) {
        return;
      }
      if (other.StockExchange != 0) {
        StockExchange = other.StockExchange;
      }
      if (other.StockCode.Length != 0) {
        StockCode = other.StockCode;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.Volume != 0UL) {
        Volume = other.Volume;
      }
      if (other.Amount != 0UL) {
        Amount = other.Amount;
      }
      if (other.TxDir != 0) {
        TxDir = other.TxDir;
      }
      if (other.TxKind != 0) {
        TxKind = other.TxKind;
      }
      if (other.BuyOrderSeq.Length != 0) {
        BuyOrderSeq = other.BuyOrderSeq;
      }
      if (other.SellOrderSeq.Length != 0) {
        SellOrderSeq = other.SellOrderSeq;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StockExchange = input.ReadUInt32();
            break;
          }
          case 18: {
            StockCode = input.ReadString();
            break;
          }
          case 24: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 34: {
            Code = input.ReadString();
            break;
          }
          case 40: {
            Price = input.ReadUInt32();
            break;
          }
          case 48: {
            Volume = input.ReadUInt64();
            break;
          }
          case 56: {
            Amount = input.ReadUInt64();
            break;
          }
          case 64: {
            TxDir = input.ReadUInt32();
            break;
          }
          case 72: {
            TxKind = input.ReadUInt32();
            break;
          }
          case 82: {
            BuyOrderSeq = input.ReadString();
            break;
          }
          case 90: {
            SellOrderSeq = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StockExchange = input.ReadUInt32();
            break;
          }
          case 18: {
            StockCode = input.ReadString();
            break;
          }
          case 24: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 34: {
            Code = input.ReadString();
            break;
          }
          case 40: {
            Price = input.ReadUInt32();
            break;
          }
          case 48: {
            Volume = input.ReadUInt64();
            break;
          }
          case 56: {
            Amount = input.ReadUInt64();
            break;
          }
          case 64: {
            TxDir = input.ReadUInt32();
            break;
          }
          case 72: {
            TxKind = input.ReadUInt32();
            break;
          }
          case 82: {
            BuyOrderSeq = input.ReadString();
            break;
          }
          case 90: {
            SellOrderSeq = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///逐笔委托
  /// </summary>
  public sealed partial class OrderRecord : pb::IMessage<OrderRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderRecord> _parser = new pb::MessageParser<OrderRecord>(() => new OrderRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::l2PushGrpc.EntityReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderRecord(OrderRecord other) : this() {
      stockExchange_ = other.stockExchange_;
      stockCode_ = other.stockCode_;
      createdAt_ = other.createdAt_;
      code_ = other.code_;
      price_ = other.price_;
      volume_ = other.volume_;
      amount_ = other.amount_;
      txDir_ = other.txDir_;
      txKind_ = other.txKind_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderRecord Clone() {
      return new OrderRecord(this);
    }

    /// <summary>Field number for the "stock_exchange" field.</summary>
    public const int StockExchangeFieldNumber = 1;
    private uint stockExchange_;
    /// <summary>
    ///证券市场，1-SH，2-SZ
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StockExchange {
      get { return stockExchange_; }
      set {
        stockExchange_ = value;
      }
    }

    /// <summary>Field number for the "stock_code" field.</summary>
    public const int StockCodeFieldNumber = 2;
    private string stockCode_ = "";
    /// <summary>
    ///证券代码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StockCode {
      get { return stockCode_; }
      set {
        stockCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 3;
    private long createdAt_;
    /// <summary>
    ///委托日期时间戳(毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 4;
    private string code_ = "";
    /// <summary>
    ///委托编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 5;
    private uint price_;
    /// <summary>
    ///委托单价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 6;
    private ulong volume_;
    /// <summary>
    ///委托数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 7;
    private ulong amount_;
    /// <summary>
    ///成交金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "tx_dir" field.</summary>
    public const int TxDirFieldNumber = 8;
    private uint txDir_;
    /// <summary>
    ///交易方向：0-未知，1-买入，2-卖出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TxDir {
      get { return txDir_; }
      set {
        txDir_ = value;
      }
    }

    /// <summary>Field number for the "tx_kind" field.</summary>
    public const int TxKindFieldNumber = 9;
    private uint txKind_;
    /// <summary>
    ///交易类型：1-市价，2-限价，3-本方优先，10-撤单，11-暂不清楚(基金/债券有此值）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TxKind {
      get { return txKind_; }
      set {
        txKind_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StockExchange != other.StockExchange) return false;
      if (StockCode != other.StockCode) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (Code != other.Code) return false;
      if (Price != other.Price) return false;
      if (Volume != other.Volume) return false;
      if (Amount != other.Amount) return false;
      if (TxDir != other.TxDir) return false;
      if (TxKind != other.TxKind) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StockExchange != 0) hash ^= StockExchange.GetHashCode();
      if (StockCode.Length != 0) hash ^= StockCode.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (Volume != 0UL) hash ^= Volume.GetHashCode();
      if (Amount != 0UL) hash ^= Amount.GetHashCode();
      if (TxDir != 0) hash ^= TxDir.GetHashCode();
      if (TxKind != 0) hash ^= TxKind.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StockExchange != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StockExchange);
      }
      if (StockCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StockCode);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CreatedAt);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Code);
      }
      if (Price != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Price);
      }
      if (Volume != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Volume);
      }
      if (Amount != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Amount);
      }
      if (TxDir != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(TxDir);
      }
      if (TxKind != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(TxKind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StockExchange != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StockExchange);
      }
      if (StockCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StockCode);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CreatedAt);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Code);
      }
      if (Price != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Price);
      }
      if (Volume != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Volume);
      }
      if (Amount != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Amount);
      }
      if (TxDir != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(TxDir);
      }
      if (TxKind != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(TxKind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StockExchange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StockExchange);
      }
      if (StockCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StockCode);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price);
      }
      if (Volume != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Volume);
      }
      if (Amount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Amount);
      }
      if (TxDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TxDir);
      }
      if (TxKind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TxKind);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderRecord other) {
      if (other == null) {
        return;
      }
      if (other.StockExchange != 0) {
        StockExchange = other.StockExchange;
      }
      if (other.StockCode.Length != 0) {
        StockCode = other.StockCode;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.Volume != 0UL) {
        Volume = other.Volume;
      }
      if (other.Amount != 0UL) {
        Amount = other.Amount;
      }
      if (other.TxDir != 0) {
        TxDir = other.TxDir;
      }
      if (other.TxKind != 0) {
        TxKind = other.TxKind;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StockExchange = input.ReadUInt32();
            break;
          }
          case 18: {
            StockCode = input.ReadString();
            break;
          }
          case 24: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 34: {
            Code = input.ReadString();
            break;
          }
          case 40: {
            Price = input.ReadUInt32();
            break;
          }
          case 48: {
            Volume = input.ReadUInt64();
            break;
          }
          case 56: {
            Amount = input.ReadUInt64();
            break;
          }
          case 64: {
            TxDir = input.ReadUInt32();
            break;
          }
          case 72: {
            TxKind = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StockExchange = input.ReadUInt32();
            break;
          }
          case 18: {
            StockCode = input.ReadString();
            break;
          }
          case 24: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 34: {
            Code = input.ReadString();
            break;
          }
          case 40: {
            Price = input.ReadUInt32();
            break;
          }
          case 48: {
            Volume = input.ReadUInt64();
            break;
          }
          case 56: {
            Amount = input.ReadUInt64();
            break;
          }
          case 64: {
            TxDir = input.ReadUInt32();
            break;
          }
          case 72: {
            TxKind = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///委托队列
  /// </summary>
  public sealed partial class OrderQueueRecord : pb::IMessage<OrderQueueRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderQueueRecord> _parser = new pb::MessageParser<OrderQueueRecord>(() => new OrderQueueRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderQueueRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::l2PushGrpc.EntityReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderQueueRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderQueueRecord(OrderQueueRecord other) : this() {
      stockExchange_ = other.stockExchange_;
      stockCode_ = other.stockCode_;
      createdAt_ = other.createdAt_;
      bid1Price_ = other.bid1Price_;
      bid1Quantity_ = other.bid1Quantity_;
      ask1Price_ = other.ask1Price_;
      ask1Quantity_ = other.ask1Quantity_;
      bidVolumeDetail_ = other.bidVolumeDetail_.Clone();
      askVolumeDetail_ = other.askVolumeDetail_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderQueueRecord Clone() {
      return new OrderQueueRecord(this);
    }

    /// <summary>Field number for the "stock_exchange" field.</summary>
    public const int StockExchangeFieldNumber = 1;
    private uint stockExchange_;
    /// <summary>
    ///证券市场，1-SH，2-SZ
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StockExchange {
      get { return stockExchange_; }
      set {
        stockExchange_ = value;
      }
    }

    /// <summary>Field number for the "stock_code" field.</summary>
    public const int StockCodeFieldNumber = 2;
    private string stockCode_ = "";
    /// <summary>
    ///证券代码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StockCode {
      get { return stockCode_; }
      set {
        stockCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 3;
    private long createdAt_;
    /// <summary>
    ///委托日期时间戳(毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "bid1_price" field.</summary>
    public const int Bid1PriceFieldNumber = 4;
    private uint bid1Price_;
    /// <summary>
    ///买1价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Bid1Price {
      get { return bid1Price_; }
      set {
        bid1Price_ = value;
      }
    }

    /// <summary>Field number for the "bid1_quantity" field.</summary>
    public const int Bid1QuantityFieldNumber = 5;
    private uint bid1Quantity_;
    /// <summary>
    ///买1笔数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Bid1Quantity {
      get { return bid1Quantity_; }
      set {
        bid1Quantity_ = value;
      }
    }

    /// <summary>Field number for the "ask1_price" field.</summary>
    public const int Ask1PriceFieldNumber = 6;
    private uint ask1Price_;
    /// <summary>
    ///卖1价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ask1Price {
      get { return ask1Price_; }
      set {
        ask1Price_ = value;
      }
    }

    /// <summary>Field number for the "ask1_quantity" field.</summary>
    public const int Ask1QuantityFieldNumber = 7;
    private uint ask1Quantity_;
    /// <summary>
    ///卖1笔数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ask1Quantity {
      get { return ask1Quantity_; }
      set {
        ask1Quantity_ = value;
      }
    }

    /// <summary>Field number for the "bid_volume_detail" field.</summary>
    public const int BidVolumeDetailFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_bidVolumeDetail_codec
        = pb::FieldCodec.ForUInt32(66);
    private readonly pbc::RepeatedField<uint> bidVolumeDetail_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///委托买入数量明细
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> BidVolumeDetail {
      get { return bidVolumeDetail_; }
    }

    /// <summary>Field number for the "ask_volume_detail" field.</summary>
    public const int AskVolumeDetailFieldNumber = 9;
    private static readonly pb::FieldCodec<uint> _repeated_askVolumeDetail_codec
        = pb::FieldCodec.ForUInt32(74);
    private readonly pbc::RepeatedField<uint> askVolumeDetail_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///委托卖出数量明细
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AskVolumeDetail {
      get { return askVolumeDetail_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderQueueRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderQueueRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StockExchange != other.StockExchange) return false;
      if (StockCode != other.StockCode) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (Bid1Price != other.Bid1Price) return false;
      if (Bid1Quantity != other.Bid1Quantity) return false;
      if (Ask1Price != other.Ask1Price) return false;
      if (Ask1Quantity != other.Ask1Quantity) return false;
      if(!bidVolumeDetail_.Equals(other.bidVolumeDetail_)) return false;
      if(!askVolumeDetail_.Equals(other.askVolumeDetail_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StockExchange != 0) hash ^= StockExchange.GetHashCode();
      if (StockCode.Length != 0) hash ^= StockCode.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (Bid1Price != 0) hash ^= Bid1Price.GetHashCode();
      if (Bid1Quantity != 0) hash ^= Bid1Quantity.GetHashCode();
      if (Ask1Price != 0) hash ^= Ask1Price.GetHashCode();
      if (Ask1Quantity != 0) hash ^= Ask1Quantity.GetHashCode();
      hash ^= bidVolumeDetail_.GetHashCode();
      hash ^= askVolumeDetail_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StockExchange != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StockExchange);
      }
      if (StockCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StockCode);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CreatedAt);
      }
      if (Bid1Price != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Bid1Price);
      }
      if (Bid1Quantity != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Bid1Quantity);
      }
      if (Ask1Price != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Ask1Price);
      }
      if (Ask1Quantity != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Ask1Quantity);
      }
      bidVolumeDetail_.WriteTo(output, _repeated_bidVolumeDetail_codec);
      askVolumeDetail_.WriteTo(output, _repeated_askVolumeDetail_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StockExchange != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StockExchange);
      }
      if (StockCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StockCode);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CreatedAt);
      }
      if (Bid1Price != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Bid1Price);
      }
      if (Bid1Quantity != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Bid1Quantity);
      }
      if (Ask1Price != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Ask1Price);
      }
      if (Ask1Quantity != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Ask1Quantity);
      }
      bidVolumeDetail_.WriteTo(ref output, _repeated_bidVolumeDetail_codec);
      askVolumeDetail_.WriteTo(ref output, _repeated_askVolumeDetail_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StockExchange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StockExchange);
      }
      if (StockCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StockCode);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (Bid1Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Bid1Price);
      }
      if (Bid1Quantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Bid1Quantity);
      }
      if (Ask1Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ask1Price);
      }
      if (Ask1Quantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ask1Quantity);
      }
      size += bidVolumeDetail_.CalculateSize(_repeated_bidVolumeDetail_codec);
      size += askVolumeDetail_.CalculateSize(_repeated_askVolumeDetail_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderQueueRecord other) {
      if (other == null) {
        return;
      }
      if (other.StockExchange != 0) {
        StockExchange = other.StockExchange;
      }
      if (other.StockCode.Length != 0) {
        StockCode = other.StockCode;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.Bid1Price != 0) {
        Bid1Price = other.Bid1Price;
      }
      if (other.Bid1Quantity != 0) {
        Bid1Quantity = other.Bid1Quantity;
      }
      if (other.Ask1Price != 0) {
        Ask1Price = other.Ask1Price;
      }
      if (other.Ask1Quantity != 0) {
        Ask1Quantity = other.Ask1Quantity;
      }
      bidVolumeDetail_.Add(other.bidVolumeDetail_);
      askVolumeDetail_.Add(other.askVolumeDetail_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StockExchange = input.ReadUInt32();
            break;
          }
          case 18: {
            StockCode = input.ReadString();
            break;
          }
          case 24: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 32: {
            Bid1Price = input.ReadUInt32();
            break;
          }
          case 40: {
            Bid1Quantity = input.ReadUInt32();
            break;
          }
          case 48: {
            Ask1Price = input.ReadUInt32();
            break;
          }
          case 56: {
            Ask1Quantity = input.ReadUInt32();
            break;
          }
          case 66:
          case 64: {
            bidVolumeDetail_.AddEntriesFrom(input, _repeated_bidVolumeDetail_codec);
            break;
          }
          case 74:
          case 72: {
            askVolumeDetail_.AddEntriesFrom(input, _repeated_askVolumeDetail_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StockExchange = input.ReadUInt32();
            break;
          }
          case 18: {
            StockCode = input.ReadString();
            break;
          }
          case 24: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 32: {
            Bid1Price = input.ReadUInt32();
            break;
          }
          case 40: {
            Bid1Quantity = input.ReadUInt32();
            break;
          }
          case 48: {
            Ask1Price = input.ReadUInt32();
            break;
          }
          case 56: {
            Ask1Quantity = input.ReadUInt32();
            break;
          }
          case 66:
          case 64: {
            bidVolumeDetail_.AddEntriesFrom(ref input, _repeated_bidVolumeDetail_codec);
            break;
          }
          case 74:
          case 72: {
            askVolumeDetail_.AddEntriesFrom(ref input, _repeated_askVolumeDetail_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///股票十档行情
  /// </summary>
  public sealed partial class StockQuoteRecord : pb::IMessage<StockQuoteRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StockQuoteRecord> _parser = new pb::MessageParser<StockQuoteRecord>(() => new StockQuoteRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StockQuoteRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::l2PushGrpc.EntityReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StockQuoteRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StockQuoteRecord(StockQuoteRecord other) : this() {
      stockExchange_ = other.stockExchange_;
      stockCode_ = other.stockCode_;
      createdAt_ = other.createdAt_;
      status_ = other.status_;
      prevClosePrice_ = other.prevClosePrice_;
      openPrice_ = other.openPrice_;
      latestPrice_ = other.latestPrice_;
      highPrice_ = other.highPrice_;
      lowPrice_ = other.lowPrice_;
      limitUpPrice_ = other.limitUpPrice_;
      limitDownPrice_ = other.limitDownPrice_;
      orderQuantity_ = other.orderQuantity_;
      volume_ = other.volume_;
      amount_ = other.amount_;
      bidVolume_ = other.bidVolume_;
      bidPrice_ = other.bidPrice_;
      askVolume_ = other.askVolume_;
      askPrice_ = other.askPrice_;
      bidPriceDetail_ = other.bidPriceDetail_.Clone();
      bidVolumeDetail_ = other.bidVolumeDetail_.Clone();
      askPriceDetail_ = other.askPriceDetail_.Clone();
      askVolumeDetail_ = other.askVolumeDetail_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StockQuoteRecord Clone() {
      return new StockQuoteRecord(this);
    }

    /// <summary>Field number for the "stock_exchange" field.</summary>
    public const int StockExchangeFieldNumber = 1;
    private uint stockExchange_;
    /// <summary>
    ///证券市场，见数据字典
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StockExchange {
      get { return stockExchange_; }
      set {
        stockExchange_ = value;
      }
    }

    /// <summary>Field number for the "stock_code" field.</summary>
    public const int StockCodeFieldNumber = 2;
    private string stockCode_ = "";
    /// <summary>
    ///证券代码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StockCode {
      get { return stockCode_; }
      set {
        stockCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 3;
    private long createdAt_;
    /// <summary>
    ///快照日期时间戳(毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private uint status_;
    /// <summary>
    ///状态：0-开盘前，1-开盘集合竞价，2-集合竞价至连续竞价，3-连续竞价，4-中午休市，5-收盘集合竞价，6-闭市
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "prev_close_price" field.</summary>
    public const int PrevClosePriceFieldNumber = 5;
    private uint prevClosePrice_;
    /// <summary>
    ///前收盘价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PrevClosePrice {
      get { return prevClosePrice_; }
      set {
        prevClosePrice_ = value;
      }
    }

    /// <summary>Field number for the "open_price" field.</summary>
    public const int OpenPriceFieldNumber = 6;
    private uint openPrice_;
    /// <summary>
    ///开盘价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpenPrice {
      get { return openPrice_; }
      set {
        openPrice_ = value;
      }
    }

    /// <summary>Field number for the "latest_price" field.</summary>
    public const int LatestPriceFieldNumber = 7;
    private uint latestPrice_;
    /// <summary>
    ///最新价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LatestPrice {
      get { return latestPrice_; }
      set {
        latestPrice_ = value;
      }
    }

    /// <summary>Field number for the "high_price" field.</summary>
    public const int HighPriceFieldNumber = 8;
    private uint highPrice_;
    /// <summary>
    ///最高价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HighPrice {
      get { return highPrice_; }
      set {
        highPrice_ = value;
      }
    }

    /// <summary>Field number for the "low_price" field.</summary>
    public const int LowPriceFieldNumber = 9;
    private uint lowPrice_;
    /// <summary>
    ///最低价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LowPrice {
      get { return lowPrice_; }
      set {
        lowPrice_ = value;
      }
    }

    /// <summary>Field number for the "limit_up_price" field.</summary>
    public const int LimitUpPriceFieldNumber = 10;
    private uint limitUpPrice_;
    /// <summary>
    ///涨停价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LimitUpPrice {
      get { return limitUpPrice_; }
      set {
        limitUpPrice_ = value;
      }
    }

    /// <summary>Field number for the "limit_down_price" field.</summary>
    public const int LimitDownPriceFieldNumber = 11;
    private uint limitDownPrice_;
    /// <summary>
    ///跌停价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LimitDownPrice {
      get { return limitDownPrice_; }
      set {
        limitDownPrice_ = value;
      }
    }

    /// <summary>Field number for the "order_quantity" field.</summary>
    public const int OrderQuantityFieldNumber = 12;
    private uint orderQuantity_;
    /// <summary>
    ///成交笔数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OrderQuantity {
      get { return orderQuantity_; }
      set {
        orderQuantity_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 13;
    private ulong volume_;
    /// <summary>
    ///成交数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 14;
    private ulong amount_;
    /// <summary>
    ///成交金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "bid_volume" field.</summary>
    public const int BidVolumeFieldNumber = 15;
    private ulong bidVolume_;
    /// <summary>
    ///委托买入数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BidVolume {
      get { return bidVolume_; }
      set {
        bidVolume_ = value;
      }
    }

    /// <summary>Field number for the "bid_price" field.</summary>
    public const int BidPriceFieldNumber = 16;
    private uint bidPrice_;
    /// <summary>
    ///委托买入加权平均价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BidPrice {
      get { return bidPrice_; }
      set {
        bidPrice_ = value;
      }
    }

    /// <summary>Field number for the "ask_volume" field.</summary>
    public const int AskVolumeFieldNumber = 17;
    private ulong askVolume_;
    /// <summary>
    ///委托卖出数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AskVolume {
      get { return askVolume_; }
      set {
        askVolume_ = value;
      }
    }

    /// <summary>Field number for the "ask_price" field.</summary>
    public const int AskPriceFieldNumber = 18;
    private uint askPrice_;
    /// <summary>
    ///委托卖出加权平均价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AskPrice {
      get { return askPrice_; }
      set {
        askPrice_ = value;
      }
    }

    /// <summary>Field number for the "bid_price_detail" field.</summary>
    public const int BidPriceDetailFieldNumber = 19;
    private static readonly pb::FieldCodec<uint> _repeated_bidPriceDetail_codec
        = pb::FieldCodec.ForUInt32(154);
    private readonly pbc::RepeatedField<uint> bidPriceDetail_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///委托买入价格明细(十档)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> BidPriceDetail {
      get { return bidPriceDetail_; }
    }

    /// <summary>Field number for the "bid_volume_detail" field.</summary>
    public const int BidVolumeDetailFieldNumber = 20;
    private static readonly pb::FieldCodec<uint> _repeated_bidVolumeDetail_codec
        = pb::FieldCodec.ForUInt32(162);
    private readonly pbc::RepeatedField<uint> bidVolumeDetail_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///委托买入数量明细(十档)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> BidVolumeDetail {
      get { return bidVolumeDetail_; }
    }

    /// <summary>Field number for the "ask_price_detail" field.</summary>
    public const int AskPriceDetailFieldNumber = 21;
    private static readonly pb::FieldCodec<uint> _repeated_askPriceDetail_codec
        = pb::FieldCodec.ForUInt32(170);
    private readonly pbc::RepeatedField<uint> askPriceDetail_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///委托卖出价格明细(十档)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AskPriceDetail {
      get { return askPriceDetail_; }
    }

    /// <summary>Field number for the "ask_volume_detail" field.</summary>
    public const int AskVolumeDetailFieldNumber = 22;
    private static readonly pb::FieldCodec<uint> _repeated_askVolumeDetail_codec
        = pb::FieldCodec.ForUInt32(178);
    private readonly pbc::RepeatedField<uint> askVolumeDetail_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///委托卖出数量明细(十档)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AskVolumeDetail {
      get { return askVolumeDetail_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StockQuoteRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StockQuoteRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StockExchange != other.StockExchange) return false;
      if (StockCode != other.StockCode) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (Status != other.Status) return false;
      if (PrevClosePrice != other.PrevClosePrice) return false;
      if (OpenPrice != other.OpenPrice) return false;
      if (LatestPrice != other.LatestPrice) return false;
      if (HighPrice != other.HighPrice) return false;
      if (LowPrice != other.LowPrice) return false;
      if (LimitUpPrice != other.LimitUpPrice) return false;
      if (LimitDownPrice != other.LimitDownPrice) return false;
      if (OrderQuantity != other.OrderQuantity) return false;
      if (Volume != other.Volume) return false;
      if (Amount != other.Amount) return false;
      if (BidVolume != other.BidVolume) return false;
      if (BidPrice != other.BidPrice) return false;
      if (AskVolume != other.AskVolume) return false;
      if (AskPrice != other.AskPrice) return false;
      if(!bidPriceDetail_.Equals(other.bidPriceDetail_)) return false;
      if(!bidVolumeDetail_.Equals(other.bidVolumeDetail_)) return false;
      if(!askPriceDetail_.Equals(other.askPriceDetail_)) return false;
      if(!askVolumeDetail_.Equals(other.askVolumeDetail_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StockExchange != 0) hash ^= StockExchange.GetHashCode();
      if (StockCode.Length != 0) hash ^= StockCode.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (PrevClosePrice != 0) hash ^= PrevClosePrice.GetHashCode();
      if (OpenPrice != 0) hash ^= OpenPrice.GetHashCode();
      if (LatestPrice != 0) hash ^= LatestPrice.GetHashCode();
      if (HighPrice != 0) hash ^= HighPrice.GetHashCode();
      if (LowPrice != 0) hash ^= LowPrice.GetHashCode();
      if (LimitUpPrice != 0) hash ^= LimitUpPrice.GetHashCode();
      if (LimitDownPrice != 0) hash ^= LimitDownPrice.GetHashCode();
      if (OrderQuantity != 0) hash ^= OrderQuantity.GetHashCode();
      if (Volume != 0UL) hash ^= Volume.GetHashCode();
      if (Amount != 0UL) hash ^= Amount.GetHashCode();
      if (BidVolume != 0UL) hash ^= BidVolume.GetHashCode();
      if (BidPrice != 0) hash ^= BidPrice.GetHashCode();
      if (AskVolume != 0UL) hash ^= AskVolume.GetHashCode();
      if (AskPrice != 0) hash ^= AskPrice.GetHashCode();
      hash ^= bidPriceDetail_.GetHashCode();
      hash ^= bidVolumeDetail_.GetHashCode();
      hash ^= askPriceDetail_.GetHashCode();
      hash ^= askVolumeDetail_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StockExchange != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StockExchange);
      }
      if (StockCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StockCode);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CreatedAt);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Status);
      }
      if (PrevClosePrice != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(PrevClosePrice);
      }
      if (OpenPrice != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(OpenPrice);
      }
      if (LatestPrice != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(LatestPrice);
      }
      if (HighPrice != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(HighPrice);
      }
      if (LowPrice != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(LowPrice);
      }
      if (LimitUpPrice != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(LimitUpPrice);
      }
      if (LimitDownPrice != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(LimitDownPrice);
      }
      if (OrderQuantity != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(OrderQuantity);
      }
      if (Volume != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(Volume);
      }
      if (Amount != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(Amount);
      }
      if (BidVolume != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(BidVolume);
      }
      if (BidPrice != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(BidPrice);
      }
      if (AskVolume != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(AskVolume);
      }
      if (AskPrice != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(AskPrice);
      }
      bidPriceDetail_.WriteTo(output, _repeated_bidPriceDetail_codec);
      bidVolumeDetail_.WriteTo(output, _repeated_bidVolumeDetail_codec);
      askPriceDetail_.WriteTo(output, _repeated_askPriceDetail_codec);
      askVolumeDetail_.WriteTo(output, _repeated_askVolumeDetail_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StockExchange != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StockExchange);
      }
      if (StockCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StockCode);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CreatedAt);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Status);
      }
      if (PrevClosePrice != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(PrevClosePrice);
      }
      if (OpenPrice != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(OpenPrice);
      }
      if (LatestPrice != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(LatestPrice);
      }
      if (HighPrice != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(HighPrice);
      }
      if (LowPrice != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(LowPrice);
      }
      if (LimitUpPrice != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(LimitUpPrice);
      }
      if (LimitDownPrice != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(LimitDownPrice);
      }
      if (OrderQuantity != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(OrderQuantity);
      }
      if (Volume != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(Volume);
      }
      if (Amount != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(Amount);
      }
      if (BidVolume != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(BidVolume);
      }
      if (BidPrice != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(BidPrice);
      }
      if (AskVolume != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(AskVolume);
      }
      if (AskPrice != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(AskPrice);
      }
      bidPriceDetail_.WriteTo(ref output, _repeated_bidPriceDetail_codec);
      bidVolumeDetail_.WriteTo(ref output, _repeated_bidVolumeDetail_codec);
      askPriceDetail_.WriteTo(ref output, _repeated_askPriceDetail_codec);
      askVolumeDetail_.WriteTo(ref output, _repeated_askVolumeDetail_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StockExchange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StockExchange);
      }
      if (StockCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StockCode);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (PrevClosePrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PrevClosePrice);
      }
      if (OpenPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpenPrice);
      }
      if (LatestPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LatestPrice);
      }
      if (HighPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HighPrice);
      }
      if (LowPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LowPrice);
      }
      if (LimitUpPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LimitUpPrice);
      }
      if (LimitDownPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LimitDownPrice);
      }
      if (OrderQuantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OrderQuantity);
      }
      if (Volume != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Volume);
      }
      if (Amount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Amount);
      }
      if (BidVolume != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BidVolume);
      }
      if (BidPrice != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BidPrice);
      }
      if (AskVolume != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(AskVolume);
      }
      if (AskPrice != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AskPrice);
      }
      size += bidPriceDetail_.CalculateSize(_repeated_bidPriceDetail_codec);
      size += bidVolumeDetail_.CalculateSize(_repeated_bidVolumeDetail_codec);
      size += askPriceDetail_.CalculateSize(_repeated_askPriceDetail_codec);
      size += askVolumeDetail_.CalculateSize(_repeated_askVolumeDetail_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StockQuoteRecord other) {
      if (other == null) {
        return;
      }
      if (other.StockExchange != 0) {
        StockExchange = other.StockExchange;
      }
      if (other.StockCode.Length != 0) {
        StockCode = other.StockCode;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.PrevClosePrice != 0) {
        PrevClosePrice = other.PrevClosePrice;
      }
      if (other.OpenPrice != 0) {
        OpenPrice = other.OpenPrice;
      }
      if (other.LatestPrice != 0) {
        LatestPrice = other.LatestPrice;
      }
      if (other.HighPrice != 0) {
        HighPrice = other.HighPrice;
      }
      if (other.LowPrice != 0) {
        LowPrice = other.LowPrice;
      }
      if (other.LimitUpPrice != 0) {
        LimitUpPrice = other.LimitUpPrice;
      }
      if (other.LimitDownPrice != 0) {
        LimitDownPrice = other.LimitDownPrice;
      }
      if (other.OrderQuantity != 0) {
        OrderQuantity = other.OrderQuantity;
      }
      if (other.Volume != 0UL) {
        Volume = other.Volume;
      }
      if (other.Amount != 0UL) {
        Amount = other.Amount;
      }
      if (other.BidVolume != 0UL) {
        BidVolume = other.BidVolume;
      }
      if (other.BidPrice != 0) {
        BidPrice = other.BidPrice;
      }
      if (other.AskVolume != 0UL) {
        AskVolume = other.AskVolume;
      }
      if (other.AskPrice != 0) {
        AskPrice = other.AskPrice;
      }
      bidPriceDetail_.Add(other.bidPriceDetail_);
      bidVolumeDetail_.Add(other.bidVolumeDetail_);
      askPriceDetail_.Add(other.askPriceDetail_);
      askVolumeDetail_.Add(other.askVolumeDetail_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StockExchange = input.ReadUInt32();
            break;
          }
          case 18: {
            StockCode = input.ReadString();
            break;
          }
          case 24: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 32: {
            Status = input.ReadUInt32();
            break;
          }
          case 40: {
            PrevClosePrice = input.ReadUInt32();
            break;
          }
          case 48: {
            OpenPrice = input.ReadUInt32();
            break;
          }
          case 56: {
            LatestPrice = input.ReadUInt32();
            break;
          }
          case 64: {
            HighPrice = input.ReadUInt32();
            break;
          }
          case 72: {
            LowPrice = input.ReadUInt32();
            break;
          }
          case 80: {
            LimitUpPrice = input.ReadUInt32();
            break;
          }
          case 88: {
            LimitDownPrice = input.ReadUInt32();
            break;
          }
          case 96: {
            OrderQuantity = input.ReadUInt32();
            break;
          }
          case 104: {
            Volume = input.ReadUInt64();
            break;
          }
          case 112: {
            Amount = input.ReadUInt64();
            break;
          }
          case 120: {
            BidVolume = input.ReadUInt64();
            break;
          }
          case 128: {
            BidPrice = input.ReadUInt32();
            break;
          }
          case 136: {
            AskVolume = input.ReadUInt64();
            break;
          }
          case 144: {
            AskPrice = input.ReadUInt32();
            break;
          }
          case 154:
          case 152: {
            bidPriceDetail_.AddEntriesFrom(input, _repeated_bidPriceDetail_codec);
            break;
          }
          case 162:
          case 160: {
            bidVolumeDetail_.AddEntriesFrom(input, _repeated_bidVolumeDetail_codec);
            break;
          }
          case 170:
          case 168: {
            askPriceDetail_.AddEntriesFrom(input, _repeated_askPriceDetail_codec);
            break;
          }
          case 178:
          case 176: {
            askVolumeDetail_.AddEntriesFrom(input, _repeated_askVolumeDetail_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StockExchange = input.ReadUInt32();
            break;
          }
          case 18: {
            StockCode = input.ReadString();
            break;
          }
          case 24: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 32: {
            Status = input.ReadUInt32();
            break;
          }
          case 40: {
            PrevClosePrice = input.ReadUInt32();
            break;
          }
          case 48: {
            OpenPrice = input.ReadUInt32();
            break;
          }
          case 56: {
            LatestPrice = input.ReadUInt32();
            break;
          }
          case 64: {
            HighPrice = input.ReadUInt32();
            break;
          }
          case 72: {
            LowPrice = input.ReadUInt32();
            break;
          }
          case 80: {
            LimitUpPrice = input.ReadUInt32();
            break;
          }
          case 88: {
            LimitDownPrice = input.ReadUInt32();
            break;
          }
          case 96: {
            OrderQuantity = input.ReadUInt32();
            break;
          }
          case 104: {
            Volume = input.ReadUInt64();
            break;
          }
          case 112: {
            Amount = input.ReadUInt64();
            break;
          }
          case 120: {
            BidVolume = input.ReadUInt64();
            break;
          }
          case 128: {
            BidPrice = input.ReadUInt32();
            break;
          }
          case 136: {
            AskVolume = input.ReadUInt64();
            break;
          }
          case 144: {
            AskPrice = input.ReadUInt32();
            break;
          }
          case 154:
          case 152: {
            bidPriceDetail_.AddEntriesFrom(ref input, _repeated_bidPriceDetail_codec);
            break;
          }
          case 162:
          case 160: {
            bidVolumeDetail_.AddEntriesFrom(ref input, _repeated_bidVolumeDetail_codec);
            break;
          }
          case 170:
          case 168: {
            askPriceDetail_.AddEntriesFrom(ref input, _repeated_askPriceDetail_codec);
            break;
          }
          case 178:
          case 176: {
            askVolumeDetail_.AddEntriesFrom(ref input, _repeated_askVolumeDetail_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///订阅信息
  /// </summary>
  public sealed partial class Subscription : pb::IMessage<Subscription>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Subscription> _parser = new pb::MessageParser<Subscription>(() => new Subscription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Subscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::l2PushGrpc.EntityReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subscription(Subscription other) : this() {
      uid_ = other.uid_;
      topic_ = other.topic_;
      topicPattern_ = other.topicPattern_;
      isSubAll_ = other.isSubAll_;
      expiredAt_ = other.expiredAt_;
      maxSubscribeCount_ = other.maxSubscribeCount_;
      usedSubscribeCount_ = other.usedSubscribeCount_;
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subscription Clone() {
      return new Subscription(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 100;
    private long uid_;
    /// <summary>
    ///用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private string topic_ = "";
    /// <summary>
    ///订阅主题，多个逗号分隔
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "topic_pattern" field.</summary>
    public const int TopicPatternFieldNumber = 2;
    private string topicPattern_ = "";
    /// <summary>
    ///订阅主题正则表达式，如果设置此属性，则topic设置无效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TopicPattern {
      get { return topicPattern_; }
      set {
        topicPattern_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_sub_all" field.</summary>
    public const int IsSubAllFieldNumber = 3;
    private bool isSubAll_;
    /// <summary>
    ///是否订阅全部
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSubAll {
      get { return isSubAll_; }
      set {
        isSubAll_ = value;
      }
    }

    /// <summary>Field number for the "expired_at" field.</summary>
    public const int ExpiredAtFieldNumber = 4;
    private long expiredAt_;
    /// <summary>
    ///订阅失效日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpiredAt {
      get { return expiredAt_; }
      set {
        expiredAt_ = value;
      }
    }

    /// <summary>Field number for the "max_subscribe_count" field.</summary>
    public const int MaxSubscribeCountFieldNumber = 5;
    private uint maxSubscribeCount_;
    /// <summary>
    ///最大订阅数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxSubscribeCount {
      get { return maxSubscribeCount_; }
      set {
        maxSubscribeCount_ = value;
      }
    }

    /// <summary>Field number for the "used_subscribe_count" field.</summary>
    public const int UsedSubscribeCountFieldNumber = 6;
    private uint usedSubscribeCount_;
    /// <summary>
    ///已有订阅数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UsedSubscribeCount {
      get { return usedSubscribeCount_; }
      set {
        usedSubscribeCount_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 7;
    private long version_;
    /// <summary>
    ///更新版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Subscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Subscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Topic != other.Topic) return false;
      if (TopicPattern != other.TopicPattern) return false;
      if (IsSubAll != other.IsSubAll) return false;
      if (ExpiredAt != other.ExpiredAt) return false;
      if (MaxSubscribeCount != other.MaxSubscribeCount) return false;
      if (UsedSubscribeCount != other.UsedSubscribeCount) return false;
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      if (Topic.Length != 0) hash ^= Topic.GetHashCode();
      if (TopicPattern.Length != 0) hash ^= TopicPattern.GetHashCode();
      if (IsSubAll != false) hash ^= IsSubAll.GetHashCode();
      if (ExpiredAt != 0L) hash ^= ExpiredAt.GetHashCode();
      if (MaxSubscribeCount != 0) hash ^= MaxSubscribeCount.GetHashCode();
      if (UsedSubscribeCount != 0) hash ^= UsedSubscribeCount.GetHashCode();
      if (Version != 0L) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Topic.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Topic);
      }
      if (TopicPattern.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TopicPattern);
      }
      if (IsSubAll != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsSubAll);
      }
      if (ExpiredAt != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ExpiredAt);
      }
      if (MaxSubscribeCount != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MaxSubscribeCount);
      }
      if (UsedSubscribeCount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(UsedSubscribeCount);
      }
      if (Version != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Version);
      }
      if (Uid != 0L) {
        output.WriteRawTag(160, 6);
        output.WriteInt64(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Topic.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Topic);
      }
      if (TopicPattern.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TopicPattern);
      }
      if (IsSubAll != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsSubAll);
      }
      if (ExpiredAt != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ExpiredAt);
      }
      if (MaxSubscribeCount != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MaxSubscribeCount);
      }
      if (UsedSubscribeCount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(UsedSubscribeCount);
      }
      if (Version != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Version);
      }
      if (Uid != 0L) {
        output.WriteRawTag(160, 6);
        output.WriteInt64(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (Topic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (TopicPattern.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TopicPattern);
      }
      if (IsSubAll != false) {
        size += 1 + 1;
      }
      if (ExpiredAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiredAt);
      }
      if (MaxSubscribeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxSubscribeCount);
      }
      if (UsedSubscribeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UsedSubscribeCount);
      }
      if (Version != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Subscription other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
      if (other.Topic.Length != 0) {
        Topic = other.Topic;
      }
      if (other.TopicPattern.Length != 0) {
        TopicPattern = other.TopicPattern;
      }
      if (other.IsSubAll != false) {
        IsSubAll = other.IsSubAll;
      }
      if (other.ExpiredAt != 0L) {
        ExpiredAt = other.ExpiredAt;
      }
      if (other.MaxSubscribeCount != 0) {
        MaxSubscribeCount = other.MaxSubscribeCount;
      }
      if (other.UsedSubscribeCount != 0) {
        UsedSubscribeCount = other.UsedSubscribeCount;
      }
      if (other.Version != 0L) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Topic = input.ReadString();
            break;
          }
          case 18: {
            TopicPattern = input.ReadString();
            break;
          }
          case 24: {
            IsSubAll = input.ReadBool();
            break;
          }
          case 32: {
            ExpiredAt = input.ReadInt64();
            break;
          }
          case 40: {
            MaxSubscribeCount = input.ReadUInt32();
            break;
          }
          case 48: {
            UsedSubscribeCount = input.ReadUInt32();
            break;
          }
          case 56: {
            Version = input.ReadInt64();
            break;
          }
          case 800: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Topic = input.ReadString();
            break;
          }
          case 18: {
            TopicPattern = input.ReadString();
            break;
          }
          case 24: {
            IsSubAll = input.ReadBool();
            break;
          }
          case 32: {
            ExpiredAt = input.ReadInt64();
            break;
          }
          case 40: {
            MaxSubscribeCount = input.ReadUInt32();
            break;
          }
          case 48: {
            UsedSubscribeCount = input.ReadUInt32();
            break;
          }
          case 56: {
            Version = input.ReadInt64();
            break;
          }
          case 800: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
